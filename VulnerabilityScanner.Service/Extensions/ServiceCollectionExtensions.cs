using VulnerabilityScanner.DataAccess.GraphQL.Extensions;
using VulnerabilityScanner.Domain.Extensions;
using VulnerabilityScanner.Infrastructure.Extensions;
using VulnerabilityScanner.Models;
using VulnerabilityScanner.Service.Interfaces;
using VulnerabilityScanner.Service.Mappers;
using VulnerabilityScanner.Service.Middlewares;
using VulnerabilityScanner.Service.Models.Requests;
using VulnerabilityScanner.Service.Models.Responses;
using VulnerabilityScanner.Service.Parsers;
using VulnerabilityScanner.Service.Parsers.Strategies;
using DomainVulnerablePackage = VulnerabilityScanner.Models.VulnerablePackage;

namespace VulnerabilityScanner.Service.Extensions;

public static class ServiceCollectionExtensions
{
    public static IServiceCollection AddService(this IServiceCollection servicesCollection)
    {
        return servicesCollection
            .AddGraphQl()
            .AddDomain()
            .AddInfrastructure()
            .AddMappers()
            .AddParsers()
            .AddErrorHandling();
    }

    private static IServiceCollection AddMappers(this IServiceCollection servicesCollection)
    {
        return servicesCollection
            .AddSingleton<IMapper<ScanRequest, Project>, ScanRequestMapper>()
            .AddSingleton<IMapper<IEnumerable<DomainVulnerablePackage>, ScanResponse>, ScanResponseMapper>();
    }

    private static IServiceCollection AddParsers(this IServiceCollection servicesCollection)
    {
        return servicesCollection
            .AddSingleton<IDependenciesParser, DependenciesParser>()
            .AddSingleton<IDependenciesParserStrategy, NpmEcosystemDependenciesParserStrategy>();

    }

    private static IServiceCollection AddErrorHandling(this IServiceCollection servicesCollection)
    {
        return servicesCollection
            .AddTransient<ErrorHandlingMiddleware>();

    }
}
