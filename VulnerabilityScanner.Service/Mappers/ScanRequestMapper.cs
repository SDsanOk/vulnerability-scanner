using System.ComponentModel.DataAnnotations;
using VulnerabilityScanner.Models;
using VulnerabilityScanner.Service.Helpers;
using VulnerabilityScanner.Service.Interfaces;
using VulnerabilityScanner.Service.Models.Requests;

namespace VulnerabilityScanner.Service.Mappers;

public class ScanRequestMapper : IMapper<ScanRequest, Project>
{
    private readonly IDependenciesParser _dependenciesParser;
    private readonly ILogger<ScanRequestMapper> _logger;

    public ScanRequestMapper(IDependenciesParser dependenciesParser, ILogger<ScanRequestMapper> logger)
    {
        _dependenciesParser = dependenciesParser;
        _logger = logger;
    }

    public Project Map(ScanRequest input)
    {
        var fileContentDecodedJson = EncodingHelper.Base64Decode(input.FileContent);
        if (!Enum.TryParse<ProjectEcosystem>(input.Ecosystem.ToString(), true, out var ecosystem))
        {
            var errorMessage = $"Can't parse presented project ecosystem {input.Ecosystem}";
            _logger.LogError(errorMessage);
            throw new ValidationException(errorMessage);
        }

        return new Project
        {
            Ecosystem = ecosystem,
            ProjectDependencies = _dependenciesParser.ParseDependencies(ecosystem, fileContentDecodedJson)
        };
    }
}
