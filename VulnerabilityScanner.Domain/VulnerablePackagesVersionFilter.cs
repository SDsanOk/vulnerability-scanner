using VulnerabilityScanner.Domain.Interfaces;
using VulnerabilityScanner.Models;
using VulnerabilityScanner.Models.Enums;

namespace VulnerabilityScanner.Domain;

public class VulnerablePackagesVersionFilter : IVulnerablePackagesVersionFilter
{
    public IEnumerable<VulnerablePackage> FilterPackagesByVersions(IEnumerable<VulnerablePackage> vulnerablePackages)
    {
        var filteredVulnerablePackages = vulnerablePackages
            .Where(x =>
                x.VulnerableVersionRanges
                    .All(versionRange => IsVersionMatch(x.Version, versionRange)));

        return filteredVulnerablePackages;
    }

    private bool IsVersionMatch(Version packageVersion, VulnerableVersionRange vulnerableVersionRange)
    {
        var vulnerableVersion = vulnerableVersionRange.Version;
        return vulnerableVersionRange.Operator switch
        {
            EqualityOperator.LessOrEqual => packageVersion <= vulnerableVersion,
            EqualityOperator.Less => packageVersion < vulnerableVersion,
            EqualityOperator.GreaterOrEqual => packageVersion >= vulnerableVersion,
            EqualityOperator.Greater => packageVersion > vulnerableVersion,
            EqualityOperator.Equal => packageVersion == vulnerableVersion,
            _ => throw new ArgumentOutOfRangeException()
        };
    }
}
