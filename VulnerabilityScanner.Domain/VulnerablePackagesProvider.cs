using VulnerabilityScanner.DataAccess.Interfaces;
using VulnerabilityScanner.Domain.Interfaces;
using VulnerabilityScanner.Models;

namespace VulnerabilityScanner.Domain;

public class VulnerablePackagesProvider : IVulnerablePackagesProvider
{
    private readonly IVulnerablePackagesRepository _vulnerablePackagesRepository;

    public VulnerablePackagesProvider(IVulnerablePackagesRepository vulnerablePackagesRepository)
    {
        _vulnerablePackagesRepository = vulnerablePackagesRepository;
    }

    public async Task<IEnumerable<VulnerablePackage>> GetVulnerablePackagesAsync(
        Project project,
        CancellationToken cancellationToken)
    {
        var packagesVersionsDictionary = project
            .ProjectDependencies
            .ToDictionary(key => key.Name, value => value.Version);
        var vulnerablePackages = await _vulnerablePackagesRepository.GetVulnerablePackagesAsync(
            project.Ecosystem,
            packagesVersionsDictionary.Keys,
            cancellationToken);

        var vulnerablePackagesList = vulnerablePackages.ToList();
        foreach (var vulnerablePackage in vulnerablePackagesList)
        {
            if (packagesVersionsDictionary.TryGetValue(vulnerablePackage.Name, out var packageVersion))
            {
                vulnerablePackage.Version = packageVersion;
            }
        }

        return vulnerablePackagesList;
    }
}