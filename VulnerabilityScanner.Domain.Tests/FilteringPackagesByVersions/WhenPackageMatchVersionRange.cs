using FluentAssertions;
using VulnerabilityScanner.Models;
using VulnerabilityScanner.Models.Enums;
using Xunit;

namespace VulnerabilityScanner.Domain.Tests.FilteringPackagesByVersions;

public class WhenPackageMatchVersionRange : VulnerablePackagesVersionFilterFixture
{
    public static IEnumerable<object[]> Data =>
        new List<object[]>
        {
            GenerateVulnerablePackage(new Version(1, 0), new Version(1, 1), EqualityOperator.Less),
            GenerateVulnerablePackage(new Version(1, 0), new Version(1, 0), EqualityOperator.LessOrEqual),
            GenerateVulnerablePackage(new Version(1, 0), new Version(0, 9), EqualityOperator.Greater),
            GenerateVulnerablePackage(new Version(1, 0), new Version(1, 0), EqualityOperator.GreaterOrEqual),
            GenerateVulnerablePackage(new Version(1, 0), new Version(1, 0), EqualityOperator.Equal),
            new object[]
            {
                new VulnerablePackage
                {
                    Version = new Version(1, 0), VulnerableVersionRanges = new[]
                    {
                        new VulnerableVersionRange { Version = new Version(0, 9), Operator = EqualityOperator.Greater },
                        new VulnerableVersionRange { Version = new Version(1, 1), Operator = EqualityOperator.Less },
                    }
                }
            },
        };

    [Theory]
    [MemberData(nameof(Data))]
    public void ReturnMatchedPackage(VulnerablePackage vulnerablePackage)
    {
        var vulnerablePackages = new[] { vulnerablePackage };

        var result = Subject.FilterPackagesByVersions(vulnerablePackages);

        result.Should().BeEquivalentTo(vulnerablePackages);
    }
}
