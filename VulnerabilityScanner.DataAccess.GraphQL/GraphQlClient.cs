using GraphQL;
using GraphQL.Client.Abstractions;
using Microsoft.Extensions.Logging;
using VulnerabilityScanner.DataAccess.GraphQL.Interfaces;
using VulnerabilityScanner.DataAccess.GraphQL.Interfaces.Deserializer;
using VulnerabilityScanner.DataAccess.GraphQL.Models;
using VulnerabilityScanner.Interfaces;

namespace VulnerabilityScanner.DataAccess.GraphQL;

public class GraphQlClient : IGraphQlClient
{
    private readonly IGraphQLClient _graphQlClient;
    private readonly IGraphQlDeserializer _graphQlDeserializer;
    private readonly ILogger<GraphQlClient> _logger;
    private readonly ISafeExecutor<GraphQlClient> _safeExecutor;

    public GraphQlClient(
        IGraphQLClient graphQlClient,
        IGraphQlDeserializer graphQlDeserializer,
        ILogger<GraphQlClient> logger,
        ISafeExecutor<GraphQlClient> safeExecutor)
    {
        _graphQlClient = graphQlClient;
        _graphQlDeserializer = graphQlDeserializer;
        _logger = logger;
        _safeExecutor = safeExecutor;
    }

    public Task<T?> ExecuteAsync<T>(GraphQlRequest request, CancellationToken cancellationToken)
    {
        return _safeExecutor.ExecuteAsync(nameof(ExecuteAsync), async () =>
        {
            var graphQlRequest = new GraphQLRequest
            {
                Query = request.Query,
                Variables = request.Variables,
                OperationName = request.OperationName
            };

            var response = await _graphQlClient.SendQueryAsync<object>(graphQlRequest, cancellationToken);
            if (response.Errors is not null)
            {
                var errorMessages = response.Errors.Select(x => x.Message);
                var errorMessagesFormatted = string.Join(", ", errorMessages);
                _logger.LogError("Errors occured during executing GraphQL request. Errors: {Errors}",
                    errorMessagesFormatted);
                return default;
            }

            var result = _graphQlDeserializer.Deserialize<T>(response.Data.ToString());
            return result;
        });
    }
}
