using GraphQL;
using GraphQL.Client.Abstractions;
using Microsoft.Extensions.Logging;
using VulnerabilityScanner.DataAccess.GraphQL.Interfaces;
using VulnerabilityScanner.DataAccess.GraphQL.Interfaces.Deserializer;
using VulnerabilityScanner.DataAccess.GraphQL.Models;

namespace VulnerabilityScanner.DataAccess.GraphQL;

public class GraphQlClient : IGraphQlClient
{
    private readonly IGraphQLClient _graphQlClient;
    private readonly IGraphQlDeserializer _graphQlDeserializer;
    private readonly ILogger<GraphQlClient> _logger;

    public GraphQlClient(
        IGraphQLClient graphQlClient,
        IGraphQlDeserializer graphQlDeserializer,
        ILogger<GraphQlClient> logger)
    {
        _graphQlClient = graphQlClient;
        _graphQlDeserializer = graphQlDeserializer;
        _logger = logger;
    }

    public async Task<T?> ExecuteAsync<T>(GraphQlRequest request, CancellationToken cancellationToken)
    {
        var graphQlRequest = new GraphQLRequest
        {
            Query = request.Query,
            Variables = request.Variables,
            OperationName = request.OperationName
        };

        var response = await _graphQlClient.SendQueryAsync<object>(graphQlRequest, cancellationToken);
        if (response.Errors is not null)
        {
            var errorMessages = response.Errors.Select(x => x.Message);
            var errorMessagesFormatted = string.Join(", ", errorMessages);
            _logger.LogError("Errors occured during executing GraphQL request. Errors: {Errors}", errorMessagesFormatted);
            return default;
        }

        var result = _graphQlDeserializer.Deserialize<T>(response.Data.ToString());
        return result;
    }
}
