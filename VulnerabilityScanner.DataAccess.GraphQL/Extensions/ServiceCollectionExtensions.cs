using Microsoft.Extensions.DependencyInjection;
using VulnerabilityScanner.DataAccess.GraphQL.Deserializer;
using VulnerabilityScanner.DataAccess.GraphQL.Deserializer.Strategies;
using VulnerabilityScanner.DataAccess.GraphQL.Interfaces;
using VulnerabilityScanner.DataAccess.GraphQL.Interfaces.Deserializer;
using VulnerabilityScanner.DataAccess.GraphQL.Parsers;
using VulnerabilityScanner.DataAccess.Interfaces;
using VulnerabilityScanner.Models;
using VulnerabilityScanner.Models.Enums;

namespace VulnerabilityScanner.DataAccess.GraphQL.Extensions;

public static class ServiceCollectionExtensions
{
    public static IServiceCollection AddGraphQl(this IServiceCollection servicesCollection)
    {
        return servicesCollection
                .AddDeserializer()
                .AddParsers()
                .AddRepositories()
                .AddSingleton<IGraphQlClientFactory, GraphQlClientFactory>()
                .AddSingleton<IGraphQlRequestFactory, GraphQlRequestFactory>()
                .AddSingleton<IGraphQlConfigurationProvider, GraphQlConfigurationProvider>()
                .AddScoped<IGraphQlClient>(provider =>
                {
                    var factory = provider.GetRequiredService<IGraphQlClientFactory>();
                    return factory.Create();
                });
    }

    private static IServiceCollection AddDeserializer(this IServiceCollection servicesCollection)
    {
        return servicesCollection
            .AddSingleton<IGraphQlDeserializer, GraphQlDeserializer>()
            .AddSingleton<IDeserializerStrategy<VulnerablePackage>, VulnerablePackageDeserializerStrategy>()
            .AddSingleton<IDeserializerStrategy<IEnumerable<VulnerablePackage>>, VulnerablePackagesDeserializerStrategy>();
    }

    private static IServiceCollection AddParsers(this IServiceCollection servicesCollection)
    {
        return servicesCollection
            .AddSingleton<IParser<EqualityOperator, string>, EqualityOperatorParser>()
            .AddSingleton<IParser<IEnumerable<VulnerableVersionRange>, string>, VulnerableVersionRangeParser>();
    }

    private static IServiceCollection AddRepositories(this IServiceCollection servicesCollection)
    {
        return servicesCollection
            .AddScoped<IVulnerablePackagesRepository, VulnerablePackagesRepository>();
    }
}
