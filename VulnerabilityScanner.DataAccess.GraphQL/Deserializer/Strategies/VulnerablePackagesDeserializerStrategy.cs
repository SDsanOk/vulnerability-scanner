using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;
using VulnerabilityScanner.DataAccess.GraphQL.Interfaces;
using VulnerabilityScanner.DataAccess.GraphQL.Interfaces.Deserializer;
using VulnerabilityScanner.DataAccess.GraphQL.Models;
using VulnerabilityScanner.Models;

namespace VulnerabilityScanner.DataAccess.GraphQL.Deserializer.Strategies;

public class VulnerablePackagesDeserializerStrategy : IDeserializerStrategy<IEnumerable<VulnerablePackage>>
{
    private readonly IParser<IEnumerable<VulnerableVersionRange>, string> _vulnerableVersionRangesParser;
    private readonly ILogger<VulnerablePackagesDeserializerStrategy> _logger;

    public VulnerablePackagesDeserializerStrategy(
        IParser<IEnumerable<VulnerableVersionRange>, string> vulnerableVersionRangesParser,
        ILogger<VulnerablePackagesDeserializerStrategy> logger)
    {
        _vulnerableVersionRangesParser = vulnerableVersionRangesParser;
        _logger = logger;
    }

    public IEnumerable<VulnerablePackage> Deserialize(string input)
    {
        var responseJObject = JObject.Parse(input);
        var securityVulnerabilities = responseJObject
            ["securityVulnerabilities"]?
            ["nodes"]?
            .ToObject<IEnumerable<SecurityVulnerability>>();

        var securityVulnerabilitiesList = securityVulnerabilities?.ToList();
        if (securityVulnerabilitiesList is null || securityVulnerabilitiesList.Any() == false)
        {
            _logger.LogDebug("Can't find securityVulnerabilities in response");
            return ArraySegment<VulnerablePackage>.Empty;
        }

        return securityVulnerabilitiesList.Select(securityVulnerability => new VulnerablePackage
        {
            Name = securityVulnerability.Package.Name,
            Summary = securityVulnerability.Advisory.Summary,
            FirstPatchedVersion = securityVulnerability.FirstPatchedVersion.Identifier,
            Severity = Enum.Parse<VulnerabilitySeverity>(securityVulnerability.Severity, true),
            VulnerableVersionRanges = _vulnerableVersionRangesParser.Parse(securityVulnerability.VulnerableVersionRange)
        });
    }
}
