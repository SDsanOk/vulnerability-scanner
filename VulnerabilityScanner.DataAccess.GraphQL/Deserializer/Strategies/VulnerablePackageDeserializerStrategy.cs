using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;
using VulnerabilityScanner.DataAccess.GraphQL.Models;
using VulnerabilityScanner.Models;

namespace VulnerabilityScanner.DataAccess.GraphQL.Deserializer.Strategies;

public class VulnerablePackageDeserializerStrategy : IDeserializerStrategy<VulnerablePackage>
{
    private readonly ILogger<VulnerablePackageDeserializerStrategy> _logger;

    public VulnerablePackageDeserializerStrategy(ILogger<VulnerablePackageDeserializerStrategy> logger)
    {
        _logger = logger;
    }

    public VulnerablePackage? Deserialize(string input)
    {
        var responseJObject = JObject.Parse(input);
        var securityVulnerabilities = responseJObject
            ["data"]?
            ["securityVulnerabilities"]?
            ["nodes"]?
            .ToObject<IEnumerable<SecurityVulnerability>>();

        var securityVulnerability = securityVulnerabilities?.FirstOrDefault();
        if (securityVulnerability is null)
        {
            _logger.LogWarning("Can't find securityVulnerability in response");
            return null;
        }
        
        return new VulnerablePackage
        {
            Name = securityVulnerability.Package.Name,
            Summary = securityVulnerability.Advisory.Summary,
            FirstPatchedVersion = securityVulnerability.FirstPatchedVersion.Identifier,
            Severity = Enum.Parse<VulnerabilitySeverity>(securityVulnerability.Severity),
            // VulnerableVersionRange = //todo: add parsing
        };
    }
}

public interface IDeserializerStrategy<out T>
{
    public T? Deserialize(string input);
}