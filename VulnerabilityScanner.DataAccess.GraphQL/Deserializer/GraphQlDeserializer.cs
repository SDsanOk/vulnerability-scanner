using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using VulnerabilityScanner.DataAccess.GraphQL.Interfaces.Deserializer;

namespace VulnerabilityScanner.DataAccess.GraphQL.Deserializer;

public class GraphQlDeserializer : IGraphQlDeserializer
{
    private readonly IServiceProvider _serviceProvider;
    private readonly ILogger<GraphQlDeserializer> _logger;

    public GraphQlDeserializer(IServiceProvider serviceProvider, ILogger<GraphQlDeserializer> logger)
    {
        _serviceProvider = serviceProvider;
        _logger = logger;
    }

    public T? Deserialize<T>(string input)
    {
        var typeDeserializer = _serviceProvider.GetService<IDeserializerStrategy<T>>();
        if (typeDeserializer is null)
        {
            _logger.LogError("Can't find deserializer for type {Type}", typeof(T));
            return default;
        }

        return typeDeserializer.Deserialize(input);
    }
}
