using System.Net.Http.Headers;
using GraphQL.Client.Http;
using GraphQL.Client.Serializer.Newtonsoft;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using VulnerabilityScanner.DataAccess.GraphQL.Interfaces;
using VulnerabilityScanner.DataAccess.GraphQL.Interfaces.Deserializer;
using VulnerabilityScanner.Infrastructure;
using VulnerabilityScanner.Interfaces;

namespace VulnerabilityScanner.DataAccess.GraphQL;

public class GraphQlClientFactory : IGraphQlClientFactory
{
    private readonly IGraphQlConfigurationProvider _configurationProvider;
    private readonly IServiceProvider _serviceProvider;

    public GraphQlClientFactory(IGraphQlConfigurationProvider configurationProvider, IServiceProvider serviceProvider)
    {
        _configurationProvider = configurationProvider;
        _serviceProvider = serviceProvider;
    }

    public IGraphQlClient Create()
    {
        var configuration = _configurationProvider.GetGraphConfiguration();
        var logger = _serviceProvider.GetRequiredService<ILogger<GraphQlClient>>();
        var graphQLClient = new GraphQLHttpClient(
            options =>
            {
                options.HttpMessageHandler = ResilienceHelper.GetResilienceMessageHandler(3, logger);
                options.EndPoint = new Uri(configuration.Uri);
            },
            new NewtonsoftJsonSerializer());
        graphQLClient.HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", configuration.AccessToken);

        return new GraphQlClient(
            graphQLClient,
            _serviceProvider.GetRequiredService<IGraphQlDeserializer>(),
            logger,
            _serviceProvider.GetRequiredService<ISafeExecutor<GraphQlClient>>());
    }
}
