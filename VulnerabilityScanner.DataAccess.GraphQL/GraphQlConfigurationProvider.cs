using Microsoft.Extensions.Logging;
using VulnerabilityScanner.DataAccess.GraphQL.Configurations;
using VulnerabilityScanner.Infrastructure;

namespace VulnerabilityScanner.DataAccess.GraphQL;

public class GraphQlConfigurationProvider : IGraphQlConfigurationProvider
{
    private readonly IEnvironmentVariablesProvider _environmentVariablesProvider;
    private readonly ILogger<GraphQlConfigurationProvider> _logger;

    private const string AccessTokenVariableName = "GITHUB-ACCESS-TOKEN";
    private const string UriVariableName = "GRAPH-REST-URI";

    public GraphQlConfigurationProvider(IEnvironmentVariablesProvider environmentVariablesProvider, ILogger<GraphQlConfigurationProvider> logger)
    {
        _environmentVariablesProvider = environmentVariablesProvider;
        _logger = logger;
    }

    public GraphConfiguration GetGraphConfiguration()
    {
        var uri = _environmentVariablesProvider.GetEnvironmentVariable(UriVariableName);
        var accessToken = _environmentVariablesProvider.GetEnvironmentVariable(AccessTokenVariableName);
        if (uri is null || accessToken is null)
        {
            var errorMessage =
                $"Please provide GraphUri and Access token in variables {UriVariableName}, {AccessTokenVariableName} accordingly";
            _logger.LogCritical(errorMessage);
            throw new Exception(errorMessage);
        }

        return new GraphConfiguration
        {
            Uri = uri,
            AccessToken = accessToken
        };
    }
}

public interface IGraphQlConfigurationProvider
{
    GraphConfiguration GetGraphConfiguration();
}