using Microsoft.Extensions.Http;
using Microsoft.Extensions.Logging;
using Polly;
using Polly.Extensions.Http;

namespace VulnerabilityScanner.Infrastructure;

public static class ResilienceHelper
{
    public static HttpMessageHandler GetResilienceMessageHandler<T>(int retryCount, ILogger<T> logger)
    {
        var retryPolicy = HttpPolicyExtensions
            .HandleTransientHttpError()
            .WaitAndRetryAsync(retryCount,
                retryAttempt => TimeSpan.FromMilliseconds(100 * Math.Pow(2, retryAttempt)),
                (result, span) =>
                {
                    logger.LogError(result.Exception, $"Error during executing request. Retrying and waiting {span}");
                });
        var policyHttpMessageHandler = new PolicyHttpMessageHandler(retryPolicy);
        policyHttpMessageHandler.InnerHandler = new HttpClientHandler();
        return policyHttpMessageHandler;
    }
}
