using Microsoft.Extensions.Logging;
using VulnerabilityScanner.Interfaces;

namespace VulnerabilityScanner.Infrastructure;

public class SafeExecutor<TCaller> : ISafeExecutor<TCaller>
{
    private readonly ILogger<TCaller> _logger;

    public SafeExecutor(ILogger<TCaller> logger)
    {
        _logger = logger;
    }

    public async Task<T?> ExecuteAsync<T>(string executionName, Func<Task<T>> asyncAction, Func<Task>? onException = null)
    {
        try
        {
            return await asyncAction();
        }
        catch (Exception e)
        {
            if (onException is not null)
            {
                await onException();
            }

            _logger.LogError(e, "Error occured during executing {ExecutionName}", executionName);
            return default;
        }
    }
}
